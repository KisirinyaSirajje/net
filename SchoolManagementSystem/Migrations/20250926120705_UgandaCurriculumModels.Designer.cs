// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SchoolManagementSystem.Data;

#nullable disable

namespace SchoolManagementSystem.Migrations
{
    [DbContext(typeof(SchoolContext))]
    [Migration("20250926120705_UgandaCurriculumModels")]
    partial class UgandaCurriculumModels
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.9");

            modelBuilder.Entity("SchoolManagementSystem.Models.Attendance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("AttendanceDate")
                        .HasColumnType("TEXT");

                    b.Property<TimeOnly?>("CheckInTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("CourseId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Notes")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<int>("StudentId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("StudentId", "CourseId", "AttendanceDate")
                        .IsUnique();

                    b.ToTable("Attendances");
                });

            modelBuilder.Entity("SchoolManagementSystem.Models.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AcademicYear")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<string>("CourseCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("CourseName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("Credits")
                        .HasColumnType("INTEGER");

                    b.Property<string>("DaysOfWeek")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<TimeOnly?>("EndTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("MaxEnrollment")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Room")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("TEXT");

                    b.Property<TimeOnly?>("StartTime")
                        .HasColumnType("TEXT");

                    b.Property<int?>("SubjectId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TeacherId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Term")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CourseCode")
                        .IsUnique();

                    b.HasIndex("SubjectId");

                    b.HasIndex("TeacherId");

                    b.ToTable("Courses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AcademicYear = "2025",
                            CourseCode = "MATH101",
                            CourseName = "Introduction to Algebra",
                            Credits = 3,
                            DaysOfWeek = "Monday, Wednesday, Friday",
                            Description = "Basic algebraic concepts and problem solving",
                            EndDate = new DateTime(2024, 12, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EndTime = new TimeOnly(10, 30, 0),
                            MaxEnrollment = 25,
                            Room = "Room 101",
                            StartDate = new DateTime(2024, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartTime = new TimeOnly(9, 0, 0),
                            TeacherId = 1,
                            Term = 0
                        },
                        new
                        {
                            Id = 2,
                            AcademicYear = "2025",
                            CourseCode = "SCI201",
                            CourseName = "General Chemistry",
                            Credits = 4,
                            DaysOfWeek = "Tuesday, Thursday",
                            Description = "Introduction to chemical principles and laboratory techniques",
                            EndDate = new DateTime(2024, 12, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EndTime = new TimeOnly(12, 0, 0),
                            MaxEnrollment = 20,
                            Room = "Lab 201",
                            StartDate = new DateTime(2024, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartTime = new TimeOnly(10, 0, 0),
                            TeacherId = 2,
                            Term = 0
                        },
                        new
                        {
                            Id = 3,
                            AcademicYear = "2025",
                            CourseCode = "CS101",
                            CourseName = "Introduction to Programming",
                            Credits = 3,
                            DaysOfWeek = "Monday, Wednesday, Friday",
                            Description = "Basic programming concepts using C#",
                            EndDate = new DateTime(2024, 12, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EndTime = new TimeOnly(15, 30, 0),
                            MaxEnrollment = 30,
                            Room = "Computer Lab",
                            StartDate = new DateTime(2024, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartTime = new TimeOnly(14, 0, 0),
                            TeacherId = 3,
                            Term = 0
                        });
                });

            modelBuilder.Entity("SchoolManagementSystem.Models.CourseEnrollment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CourseId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("EnrollmentDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<int>("StudentId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("StudentId", "CourseId")
                        .IsUnique();

                    b.ToTable("CourseEnrollments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CourseId = 1,
                            EnrollmentDate = new DateTime(2024, 8, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Active",
                            StudentId = 1
                        },
                        new
                        {
                            Id = 2,
                            CourseId = 3,
                            EnrollmentDate = new DateTime(2024, 8, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Active",
                            StudentId = 1
                        },
                        new
                        {
                            Id = 3,
                            CourseId = 1,
                            EnrollmentDate = new DateTime(2024, 8, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Active",
                            StudentId = 2
                        },
                        new
                        {
                            Id = 4,
                            CourseId = 2,
                            EnrollmentDate = new DateTime(2024, 8, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Active",
                            StudentId = 2
                        },
                        new
                        {
                            Id = 5,
                            CourseId = 2,
                            EnrollmentDate = new DateTime(2024, 8, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Active",
                            StudentId = 3
                        },
                        new
                        {
                            Id = 6,
                            CourseId = 3,
                            EnrollmentDate = new DateTime(2024, 8, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Active",
                            StudentId = 3
                        });
                });

            modelBuilder.Entity("SchoolManagementSystem.Models.Grade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AssignmentName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Comments")
                        .HasMaxLength(300)
                        .HasColumnType("TEXT");

                    b.Property<int>("CourseId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("EarnedPoints")
                        .HasColumnType("decimal(8,2)");

                    b.Property<DateTime>("GradeDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("GradeType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("LetterGrade")
                        .HasMaxLength(5)
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("NumericGrade")
                        .HasColumnType("decimal(5,2)");

                    b.Property<int>("StudentId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("TotalPoints")
                        .HasColumnType("decimal(8,2)");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("StudentId");

                    b.ToTable("Grades");
                });

            modelBuilder.Entity("SchoolManagementSystem.Models.GradeScale", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Grade")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("GradePoint")
                        .HasColumnType("decimal(3,2)");

                    b.Property<bool>("IsPassingGrade")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Level")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MaxMark")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MinMark")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Grade", "Level")
                        .IsUnique();

                    b.ToTable("GradeScales");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Exceptional",
                            DisplayOrder = 1,
                            Grade = "A",
                            GradePoint = 5.0m,
                            IsPassingGrade = true,
                            Level = 0,
                            MaxMark = 100,
                            MinMark = 90
                        },
                        new
                        {
                            Id = 2,
                            Description = "Outstanding",
                            DisplayOrder = 2,
                            Grade = "B",
                            GradePoint = 4.0m,
                            IsPassingGrade = true,
                            Level = 0,
                            MaxMark = 89,
                            MinMark = 80
                        },
                        new
                        {
                            Id = 3,
                            Description = "Satisfactory",
                            DisplayOrder = 3,
                            Grade = "C",
                            GradePoint = 3.0m,
                            IsPassingGrade = true,
                            Level = 0,
                            MaxMark = 79,
                            MinMark = 70
                        },
                        new
                        {
                            Id = 4,
                            Description = "Basic",
                            DisplayOrder = 4,
                            Grade = "D",
                            GradePoint = 2.0m,
                            IsPassingGrade = true,
                            Level = 0,
                            MaxMark = 69,
                            MinMark = 60
                        },
                        new
                        {
                            Id = 5,
                            Description = "Elementary",
                            DisplayOrder = 5,
                            Grade = "E",
                            GradePoint = 0.0m,
                            IsPassingGrade = false,
                            Level = 0,
                            MaxMark = 59,
                            MinMark = 0
                        },
                        new
                        {
                            Id = 6,
                            Description = "Distinction",
                            DisplayOrder = 1,
                            Grade = "A",
                            GradePoint = 5.0m,
                            IsPassingGrade = true,
                            Level = 1,
                            MaxMark = 100,
                            MinMark = 80
                        },
                        new
                        {
                            Id = 7,
                            Description = "Credit",
                            DisplayOrder = 2,
                            Grade = "B",
                            GradePoint = 4.0m,
                            IsPassingGrade = true,
                            Level = 1,
                            MaxMark = 79,
                            MinMark = 70
                        },
                        new
                        {
                            Id = 8,
                            Description = "Pass",
                            DisplayOrder = 3,
                            Grade = "C",
                            GradePoint = 3.0m,
                            IsPassingGrade = true,
                            Level = 1,
                            MaxMark = 69,
                            MinMark = 60
                        },
                        new
                        {
                            Id = 9,
                            Description = "Weak Pass",
                            DisplayOrder = 4,
                            Grade = "D",
                            GradePoint = 2.0m,
                            IsPassingGrade = true,
                            Level = 1,
                            MaxMark = 59,
                            MinMark = 50
                        },
                        new
                        {
                            Id = 10,
                            Description = "Fail",
                            DisplayOrder = 5,
                            Grade = "E",
                            GradePoint = 1.0m,
                            IsPassingGrade = false,
                            Level = 1,
                            MaxMark = 49,
                            MinMark = 40
                        },
                        new
                        {
                            Id = 11,
                            Description = "Subsidiary Pass",
                            DisplayOrder = 6,
                            Grade = "O",
                            GradePoint = 0.5m,
                            IsPassingGrade = false,
                            Level = 1,
                            MaxMark = 39,
                            MinMark = 30
                        },
                        new
                        {
                            Id = 12,
                            Description = "Fail",
                            DisplayOrder = 7,
                            Grade = "F",
                            GradePoint = 0.0m,
                            IsPassingGrade = false,
                            Level = 1,
                            MaxMark = 29,
                            MinMark = 0
                        });
                });

            modelBuilder.Entity("SchoolManagementSystem.Models.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AcademicYear")
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<string>("Address")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("CurrentClass")
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<int>("CurrentLevel")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("EnrollmentDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("GuardianName")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("GuardianPhone")
                        .HasMaxLength(15)
                        .HasColumnType("TEXT");

                    b.Property<string>("IndexNumber")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(15)
                        .HasColumnType("TEXT");

                    b.Property<int>("Stream")
                        .HasColumnType("INTEGER");

                    b.Property<string>("StudentId")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("StudentId")
                        .IsUnique();

                    b.ToTable("Students");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CurrentLevel = 0,
                            DateOfBirth = new DateTime(2005, 3, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "alice.wilson@student.edu",
                            EnrollmentDate = new DateTime(2024, 8, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Alice",
                            IsActive = true,
                            LastName = "Wilson",
                            PhoneNumber = "555-1001",
                            Stream = 0,
                            StudentId = "STU2024001"
                        },
                        new
                        {
                            Id = 2,
                            CurrentLevel = 0,
                            DateOfBirth = new DateTime(2005, 7, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "bob.davis@student.edu",
                            EnrollmentDate = new DateTime(2024, 8, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Bob",
                            IsActive = true,
                            LastName = "Davis",
                            PhoneNumber = "555-1002",
                            Stream = 0,
                            StudentId = "STU2024002"
                        },
                        new
                        {
                            Id = 3,
                            CurrentLevel = 0,
                            DateOfBirth = new DateTime(2004, 11, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "carol.martinez@student.edu",
                            EnrollmentDate = new DateTime(2024, 8, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Carol",
                            IsActive = true,
                            LastName = "Martinez",
                            PhoneNumber = "555-1003",
                            Stream = 0,
                            StudentId = "STU2024003"
                        });
                });

            modelBuilder.Entity("SchoolManagementSystem.Models.StudentSubjectPerformance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AcademicYear")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("AssessmentDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("AssessmentType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Comments")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("GradePoint")
                        .HasColumnType("decimal(3,2)");

                    b.Property<int?>("GradeScaleId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsFinalGrade")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("TEXT");

                    b.Property<string>("LetterGrade")
                        .HasMaxLength(5)
                        .HasColumnType("TEXT");

                    b.Property<int>("ResultStatus")
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("Score")
                        .HasColumnType("decimal(5,2)");

                    b.Property<int>("StudentId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SubjectId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("SubmittedDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("Term")
                        .HasColumnType("INTEGER");

                    b.Property<int>("WeightPercentage")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("GradeScaleId");

                    b.HasIndex("StudentId");

                    b.HasIndex("SubjectId");

                    b.ToTable("StudentSubjectPerformances");
                });

            modelBuilder.Entity("SchoolManagementSystem.Models.Subject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Code")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<int>("Credits")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Level")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("Stream")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Name", "Level")
                        .IsUnique();

                    b.ToTable("Subjects");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "ENG",
                            Credits = 1,
                            Description = "Communication skills, grammar, composition and comprehension",
                            IsActive = true,
                            Level = 0,
                            Name = "English Language",
                            Stream = 0,
                            Type = 0
                        },
                        new
                        {
                            Id = 2,
                            Code = "MATH",
                            Credits = 1,
                            Description = "Algebra, geometry, statistics and problem solving",
                            IsActive = true,
                            Level = 0,
                            Name = "Mathematics",
                            Stream = 0,
                            Type = 0
                        },
                        new
                        {
                            Id = 3,
                            Code = "PHY",
                            Credits = 1,
                            Description = "Mechanics, waves, electricity and modern physics",
                            IsActive = true,
                            Level = 0,
                            Name = "Physics",
                            Stream = 1,
                            Type = 0
                        },
                        new
                        {
                            Id = 4,
                            Code = "CHEM",
                            Credits = 1,
                            Description = "Atomic structure, chemical bonding and reactions",
                            IsActive = true,
                            Level = 0,
                            Name = "Chemistry",
                            Stream = 1,
                            Type = 0
                        },
                        new
                        {
                            Id = 5,
                            Code = "BIO",
                            Credits = 1,
                            Description = "Cell biology, genetics, ecology and human biology",
                            IsActive = true,
                            Level = 0,
                            Name = "Biology",
                            Stream = 1,
                            Type = 0
                        },
                        new
                        {
                            Id = 6,
                            Code = "HIST",
                            Credits = 1,
                            Description = "World history, Ugandan history and political systems",
                            IsActive = true,
                            Level = 0,
                            Name = "History & Political Education",
                            Stream = 2,
                            Type = 0
                        },
                        new
                        {
                            Id = 7,
                            Code = "GEOG",
                            Credits = 1,
                            Description = "Physical and human geography of Uganda and the world",
                            IsActive = true,
                            Level = 0,
                            Name = "Geography",
                            Stream = 0,
                            Type = 0
                        },
                        new
                        {
                            Id = 8,
                            Code = "LIT",
                            Credits = 1,
                            Description = "Poetry, prose, drama and literary analysis",
                            IsActive = true,
                            Level = 0,
                            Name = "Literature in English",
                            Stream = 2,
                            Type = 1
                        },
                        new
                        {
                            Id = 9,
                            Code = "CRE",
                            Credits = 1,
                            Description = "Biblical studies, Christian doctrine and ethics",
                            IsActive = true,
                            Level = 0,
                            Name = "Christian Religious Education",
                            Stream = 2,
                            Type = 1
                        },
                        new
                        {
                            Id = 10,
                            Code = "IRE",
                            Credits = 1,
                            Description = "Quranic studies, Islamic principles and history",
                            IsActive = true,
                            Level = 0,
                            Name = "Islamic Religious Education",
                            Stream = 2,
                            Type = 1
                        },
                        new
                        {
                            Id = 11,
                            Code = "AGRIC",
                            Credits = 1,
                            Description = "Crop production, animal husbandry and agricultural economics",
                            IsActive = true,
                            Level = 0,
                            Name = "Agriculture",
                            Stream = 1,
                            Type = 1
                        },
                        new
                        {
                            Id = 12,
                            Code = "ICT",
                            Credits = 1,
                            Description = "Computer literacy, programming basics and digital citizenship",
                            IsActive = true,
                            Level = 0,
                            Name = "ICT/Computer Studies",
                            Stream = 4,
                            Type = 1
                        },
                        new
                        {
                            Id = 13,
                            Code = "ENTR",
                            Credits = 1,
                            Description = "Business skills, innovation and economic principles",
                            IsActive = true,
                            Level = 0,
                            Name = "Entrepreneurship",
                            Stream = 3,
                            Type = 1
                        },
                        new
                        {
                            Id = 14,
                            Code = "ART",
                            Credits = 1,
                            Description = "Drawing, painting, sculpture and art history",
                            IsActive = true,
                            Level = 0,
                            Name = "Fine Art",
                            Stream = 2,
                            Type = 1
                        },
                        new
                        {
                            Id = 15,
                            Code = "PE",
                            Credits = 1,
                            Description = "Sports, fitness and health education",
                            IsActive = true,
                            Level = 0,
                            Name = "Physical Education",
                            Stream = 0,
                            Type = 2
                        },
                        new
                        {
                            Id = 16,
                            Code = "A-MATH",
                            Credits = 2,
                            Description = "Advanced algebra, calculus, statistics and mechanics",
                            IsActive = true,
                            Level = 1,
                            Name = "A-Level Mathematics",
                            Stream = 1,
                            Type = 0
                        },
                        new
                        {
                            Id = 17,
                            Code = "A-PHY",
                            Credits = 2,
                            Description = "Advanced mechanics, thermodynamics, electromagnetism and quantum physics",
                            IsActive = true,
                            Level = 1,
                            Name = "A-Level Physics",
                            Stream = 1,
                            Type = 1
                        },
                        new
                        {
                            Id = 18,
                            Code = "A-CHEM",
                            Credits = 2,
                            Description = "Organic chemistry, physical chemistry and analytical techniques",
                            IsActive = true,
                            Level = 1,
                            Name = "A-Level Chemistry",
                            Stream = 1,
                            Type = 1
                        },
                        new
                        {
                            Id = 19,
                            Code = "A-BIO",
                            Credits = 2,
                            Description = "Advanced biology, biochemistry, genetics and ecology",
                            IsActive = true,
                            Level = 1,
                            Name = "A-Level Biology",
                            Stream = 1,
                            Type = 1
                        },
                        new
                        {
                            Id = 20,
                            Code = "S-MATH",
                            Credits = 1,
                            Description = "Applied mathematics for non-mathematics majors",
                            IsActive = true,
                            Level = 1,
                            Name = "Subsidiary Mathematics",
                            Stream = 1,
                            Type = 2
                        },
                        new
                        {
                            Id = 21,
                            Code = "A-HIST",
                            Credits = 2,
                            Description = "Advanced historical analysis and research methods",
                            IsActive = true,
                            Level = 1,
                            Name = "A-Level History",
                            Stream = 2,
                            Type = 1
                        },
                        new
                        {
                            Id = 22,
                            Code = "A-GEOG",
                            Credits = 2,
                            Description = "Advanced physical and human geography with fieldwork",
                            IsActive = true,
                            Level = 1,
                            Name = "A-Level Geography",
                            Stream = 2,
                            Type = 1
                        },
                        new
                        {
                            Id = 23,
                            Code = "A-ECON",
                            Credits = 2,
                            Description = "Microeconomics, macroeconomics and economic development",
                            IsActive = true,
                            Level = 1,
                            Name = "A-Level Economics",
                            Stream = 3,
                            Type = 1
                        },
                        new
                        {
                            Id = 24,
                            Code = "A-LIT",
                            Credits = 2,
                            Description = "Advanced literary criticism and comparative literature",
                            IsActive = true,
                            Level = 1,
                            Name = "A-Level Literature",
                            Stream = 2,
                            Type = 1
                        },
                        new
                        {
                            Id = 25,
                            Code = "A-CRE",
                            Credits = 2,
                            Description = "Advanced Christian theology and comparative religion",
                            IsActive = true,
                            Level = 1,
                            Name = "A-Level CRE",
                            Stream = 2,
                            Type = 1
                        },
                        new
                        {
                            Id = 26,
                            Code = "A-IRE",
                            Credits = 2,
                            Description = "Advanced Islamic studies and jurisprudence",
                            IsActive = true,
                            Level = 1,
                            Name = "A-Level IRE",
                            Stream = 2,
                            Type = 1
                        },
                        new
                        {
                            Id = 27,
                            Code = "A-ENTR",
                            Credits = 2,
                            Description = "Advanced business management and innovation",
                            IsActive = true,
                            Level = 1,
                            Name = "A-Level Entrepreneurship",
                            Stream = 3,
                            Type = 1
                        });
                });

            modelBuilder.Entity("SchoolManagementSystem.Models.Teacher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("Department")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("EmployeeId")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("HighestQualification")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("HireDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(15)
                        .HasColumnType("TEXT");

                    b.Property<string>("Specialization")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("TeachingLicenseNumber")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int?>("YearsOfExperience")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("EmployeeId")
                        .IsUnique();

                    b.ToTable("Teachers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Department = "Mathematics",
                            Email = "j.smith@school.edu",
                            EmployeeId = "EMP001",
                            FirstName = "John",
                            HighestQualification = 2,
                            HireDate = new DateTime(2020, 8, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            LastName = "Smith",
                            PhoneNumber = "555-0101",
                            Specialization = "Algebra & Calculus",
                            YearsOfExperience = 8
                        },
                        new
                        {
                            Id = 2,
                            Department = "Science",
                            Email = "s.johnson@school.edu",
                            EmployeeId = "EMP002",
                            FirstName = "Sarah",
                            HighestQualification = 2,
                            HireDate = new DateTime(2019, 1, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            LastName = "Johnson",
                            PhoneNumber = "555-0102",
                            Specialization = "Chemistry & Biology",
                            YearsOfExperience = 12
                        },
                        new
                        {
                            Id = 3,
                            Department = "Computer Science",
                            Email = "m.brown@school.edu",
                            EmployeeId = "EMP003",
                            FirstName = "Michael",
                            HighestQualification = 2,
                            HireDate = new DateTime(2021, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            LastName = "Brown",
                            PhoneNumber = "555-0103",
                            Specialization = "Programming & Algorithms",
                            YearsOfExperience = 6
                        });
                });

            modelBuilder.Entity("SchoolManagementSystem.Models.TeacherSubject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("AssignedDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CertificationDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsPrimarySubject")
                        .HasColumnType("INTEGER");

                    b.Property<string>("QualificationDetails")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<int>("QualificationLevel")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SubjectId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TeacherId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("YearsOfExperience")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("SubjectId");

                    b.HasIndex("TeacherId", "SubjectId")
                        .IsUnique();

                    b.ToTable("TeacherSubjects");
                });

            modelBuilder.Entity("SchoolManagementSystem.Models.Attendance", b =>
                {
                    b.HasOne("SchoolManagementSystem.Models.Course", "Course")
                        .WithMany("Attendances")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolManagementSystem.Models.Student", "Student")
                        .WithMany("Attendances")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("SchoolManagementSystem.Models.Course", b =>
                {
                    b.HasOne("SchoolManagementSystem.Models.Subject", "Subject")
                        .WithMany("Courses")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("SchoolManagementSystem.Models.Teacher", "Teacher")
                        .WithMany("Courses")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Subject");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("SchoolManagementSystem.Models.CourseEnrollment", b =>
                {
                    b.HasOne("SchoolManagementSystem.Models.Course", "Course")
                        .WithMany("CourseEnrollments")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolManagementSystem.Models.Student", "Student")
                        .WithMany("CourseEnrollments")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("SchoolManagementSystem.Models.Grade", b =>
                {
                    b.HasOne("SchoolManagementSystem.Models.Course", "Course")
                        .WithMany("Grades")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolManagementSystem.Models.Student", "Student")
                        .WithMany("Grades")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("SchoolManagementSystem.Models.StudentSubjectPerformance", b =>
                {
                    b.HasOne("SchoolManagementSystem.Models.GradeScale", "GradeScale")
                        .WithMany("StudentPerformances")
                        .HasForeignKey("GradeScaleId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("SchoolManagementSystem.Models.Student", "Student")
                        .WithMany("SubjectPerformances")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolManagementSystem.Models.Subject", "Subject")
                        .WithMany("StudentPerformances")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GradeScale");

                    b.Navigation("Student");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("SchoolManagementSystem.Models.TeacherSubject", b =>
                {
                    b.HasOne("SchoolManagementSystem.Models.Subject", "Subject")
                        .WithMany("TeacherSubjects")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolManagementSystem.Models.Teacher", "Teacher")
                        .WithMany("TeacherSubjects")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subject");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("SchoolManagementSystem.Models.Course", b =>
                {
                    b.Navigation("Attendances");

                    b.Navigation("CourseEnrollments");

                    b.Navigation("Grades");
                });

            modelBuilder.Entity("SchoolManagementSystem.Models.GradeScale", b =>
                {
                    b.Navigation("StudentPerformances");
                });

            modelBuilder.Entity("SchoolManagementSystem.Models.Student", b =>
                {
                    b.Navigation("Attendances");

                    b.Navigation("CourseEnrollments");

                    b.Navigation("Grades");

                    b.Navigation("SubjectPerformances");
                });

            modelBuilder.Entity("SchoolManagementSystem.Models.Subject", b =>
                {
                    b.Navigation("Courses");

                    b.Navigation("StudentPerformances");

                    b.Navigation("TeacherSubjects");
                });

            modelBuilder.Entity("SchoolManagementSystem.Models.Teacher", b =>
                {
                    b.Navigation("Courses");

                    b.Navigation("TeacherSubjects");
                });
#pragma warning restore 612, 618
        }
    }
}
